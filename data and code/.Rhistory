c(0.5, 100.000 ,100.00 , 29.450,  100.00 ,100.000  , 1.975, 100.000 ,100.000, 100.000),
c(0.6, 100.000 ,100.00  ,99.825, 100.00 ,100.000 , 61.075,  100.000 ,100.000 , 77.200),
c(0.7, 100.000 ,100.00 ,100.000, 100.00 ,100.000 , 84.075, 100.000 ,100.000 , 45.375),
c(0.8, 100.000, 100.00 ,100.000,  100.00, 100.000 , 99.000, 100.000 ,100.000 , 20.800),
c(0.9, 100.000, 100.00, 100.000, 100.00, 100.000, 100.000, 100.000, 100.000,  60.350),
c(1.0, 100.000 ,100.00 ,100.000, 100.000 ,100.00 ,100.000,100.000 ,100.00, 85.275),
c(0.1,  89.7125,   0.000 ,  0.0000, 86.8000 ,  0.0000 ,  0.0000, 79.8625 ,  0.0000  , 1.3750),
c(0.2, 100.0000 , 33.925 ,  0.6625,  99.9750,  11.6750,   0.0000, 99.6000 , 13.3125  , 0.2500),
c(0.3, 100.0000,  91.125 , 91.8750, 100.0000 , 90.0875 , 61.8000, 100.0000 , 78.9250 ,  0.6625),
c(0.4, 100.0000 ,100.000 ,100.0000, 100.0000 , 99.9250 , 99.8125, 100.0000 , 98.4750 , 63.1125),
c(0.5, 100.0000 ,100.000, 100.0000, 100.0000, 100.0000, 100.0000,  100.0000 ,100.0000 , 94.7875),
c(0.6, 100.0000, 100.000 ,100.0000, 100.0000 ,100.0000 ,100.0000,100.0000, 100.0000 , 99.5250 ),
c(0.7, 100.0000 ,100.000 ,100.0000,100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000, 100.0000),
c(0.8, 100.0000 ,100.000 ,100.0000,100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000, 100.0000),
c(0.9,100.0000 ,100.000 ,100.0000,100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000, 100.0000 ),
c(1.0, 100.0000 ,100.000 ,100.0000,100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000, 100.0000)), 2))
colnames(power_dt_1200) = c("# of DIF Items", "Amount of DIF",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3")
kbl(power_dt_1200, digits = 2) %>%
kable_classic(full_width = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
add_header_above(c(" " = 2, "1/2 ratio" = 3, "1/3 ratio" = 3, "1/4 ratio" = 3))
### tables for dif
library(kableExtra)
library(ggplot2)
## one dif item condition type I error
test_dt = data.frame(rbind(c(400, 4.91, 0, 4.91, 4.23, 0, 4.23, 4.56, 0, 4.56),
c(800, 3.35, 0, 0.62, 2.78, 0, 1.13, 3.92  , 0 , 3.79),
c(1200, 3.46  , 0, 0, 2.52  , 0.00  , 0.00, 3.10 ,  0.00  , 0.05)))
colnames(test_dt) = c("Sample Size", "Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3")
kbl(test_dt) %>%
kable_classic(full_width = F) %>%
add_header_above(c(" " = 1, "1/2 ratio" = 3, "1/3 ratio" = 3, "1/4 ratio" = 3)) %>%
add_header_above(c(" " = 1, "One DIF item Condition" = 9))
## two dif item condition type I error
test_dt = data.frame(rbind(c(400,   4.38,  0,   4.38, 6.70,  0,  6.53, 3.60, 0, 2.00),
c(800, 4.40, 0,  0.75, 5.18, 0, 4.33, 3.95, 0, 3.95),
c(1200, 4.88, 0, 0, 2.95, 0, 0.03, 4.45, 0, 1.05)))
colnames(test_dt) = c("Sample Size", "Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3")
kbl(test_dt) %>%
kable_classic(full_width = F) %>%
add_header_above(c(" " = 1, "1/2 ratio" = 3, "1/3 ratio" = 3, "1/4 ratio" = 3)) %>%
add_header_above(c(" " = 1, "Two DIF item Condition" = 9))
## four dif item condition type I error
test_dt = data.frame(rbind(c(400, 2.33, 0, 2.33, 4.41, 0, 4.41, 5.6, 0, 3.42),
c(800, 3.25, 0, 1.11, 3.96, 0, 3.36, 3.31, 0, 2.58),
c(1200, 1.75, 0, 0, 3.91, 0, 0, 5.48, 0, 0.38)))
colnames(test_dt) = c("Sample Size", "Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3")
kbl(test_dt, align = "l") %>%
kable_classic(full_width = F) %>%
add_header_above(c(" " = 1, "1/2 ratio" = 3, "1/3 ratio" = 3, "1/4 ratio" = 3)) %>%
add_header_above(c(" " = 1, "Four DIF item Condition" = 9)) %>% column_spec(1, bold = T) %>%
pack_rows("Four DIF Item Condition", 1, 3)
### stack all three tables together
test_dt = data.frame(rbind(c("One DIF Item Condition", 400, 4.91, 0, 4.91, 4.23, 0, 4.23, 4.56, 0, 4.56),
c("One DIF Item Condition", 800, 3.35, 0, 0.62, 2.78, 0, 1.13, 3.92  , 0 , 3.79),
c("One DIF Item Condition", 1200, 3.46  , 0, 0, 2.52  , 0.00  , 0.00, 3.10 ,  0.00  , 0.05),
c("Two DIF Items Condition", 400,   4.38,  0,   4.38, 6.70,  0,  6.53, 3.60, 0, 2.00),
c("Two DIF Items Condition", 800, 4.40, 0,  0.75, 5.18, 0, 4.33, 3.95, 0, 3.95),
c("Two DIF Items Condition", 1200, 4.88, 0, 0, 2.95, 0, 0.03, 4.45, 0, 1.05),
c("Four DIF Items Condition", 400, 2.33, 0, 2.33, 4.41, 0, 4.41, 5.6, 0, 3.42),
c("Four DIF Items Condition", 800, 3.25, 0, 1.11, 3.96, 0, 3.36, 3.31, 0, 2.58),
c("Four DIF Items Condition", 1200, 1.75, 0, 0, 3.91, 0, 0, 5.48, 0, 0.38)))
colnames(test_dt) = c("", "Sample Size", "Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3")
kbl(test_dt, align = "c") %>%
kable_classic(full_width = F) %>%
column_spec(1, bold = T) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
add_header_above(c(" " = 2, "1/2 ratio" = 3, "1/3 ratio" = 3, "1/4 ratio" = 3))
#################################################################################
#################################################################################
## power tables
## sample size of 400
power_dt = cbind(c(rep("One DIF Item", 10), rep("Two DIF Item", 10), rep("Four DIF Item", 10)),
round(rbind(c(0.1, 46.45  , 0.68 , 46.45,  52.94  , 0.39 , 52.94, 37.78 ,  0.22 , 35.93),
c(0.2, 96.29 , 25.30 , 96.29, 96.05 , 24.45 , 96.05, 88.17 , 11.76,  87.46),
c(0.3, 100.00 , 86.57, 100.00,99.96,  85.94 , 99.96, 99.54 , 63.53 , 99.53),
c(0.4, 100.00 , 99.96 ,100.00, 100.00 , 99.65 ,100.00, 100.00 , 95.92, 100.00),
c(0.5, 100.00 ,100.00 ,100.00, 100.00, 100.00 ,100.00, 100.00 , 99.84 ,100.00),
c(0.6, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00),
c(0.7, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00),
c(0.8, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00),
c(0.9, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00),
c(1.0, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00, 100.00 ,100.00 ,100.00),
c(0.1, 41.875 ,  0.400 , 41.875, 28.075  , 0.125 ,26.475, 29.225 ,  0.075 , 8.400),
c(0.2, 94.800 , 22.075 , 94.800, 86.950 , 12.600 , 82.900,85.475 ,  4.825 ,31.525 ),
c(0.3, 100.000 , 75.975 ,100.000, 99.600 , 63.475, 99.550, 99.200 , 51.200, 58.700),
c(0.4, 100.000 , 99.575 ,100.000, 100.000 , 94.775, 99.975, 100.000 , 93.650 ,61.325),
c(0.5, 100.000 ,100.000, 100.000, 100.000 , 99.975, 90.625, 100.000 , 99.650 , 9.375),
c(0.6,  100.000 ,100.000 ,100.000, 100.000 ,100.000 ,82.850, 100.000 ,100.000 ,11.525),
c(0.7, 100.000, 100.000 , 98.775, 100.000 ,100.000 ,48.950,  100.000 ,100.000, 30.050),
c(0.8, 100.000 ,100.000  ,94.300,100.000, 100.000 ,39.425, 100.000 ,100.000, 69.800),
c(0.9, 100.000 ,100.000 , 66.750, 100.000, 100.000 ,54.950, 100.000 ,100.000, 95.550),
c(1.0, 100.000 ,100.000 , 59.775,100.000 ,100.000 ,71.275, 100.000, 100.000, 99.025),
c( 0.1, 63.2750  , 0.5125  ,60.9750, 63.3500 ,  0.5500  ,63.2125, 33.9125 ,  0.2625  , 1.8750),
c( 0.2,  94.3625 , 40.0000 , 89.6875, 97.8000  ,35.0875 , 96.8375, 91.2000 , 21.0000  , 0.5625 ),
c( 0.3, 99.6250 , 89.7875 , 66.8875, 99.9750 , 92.0000 , 93.3250,  99.4375 , 66.3250 ,  1.0500),
c( 0.4, 100.0000 , 98.5125 , 30.5250,100.0000 , 99.1375 , 50.2125, 100.0000 , 95.6250 , 72.7500),
c( 0.5, 100.0000 , 99.9875 , 71.7875, 100.0000,  99.9875 , 36.2625,  100.0000 , 99.9750 , 99.4375),
c( 0.6, 100.0000, 100.0000 , 99.0875,100.0000, 100.0000,  92.1250, 100.0000 ,100.0000, 100.0000),
c( 0.7, 100.0000 ,100.0000 , 96.4125, 100.0000, 100.0000 , 95.2375, 100.0000 ,100.0000, 100.0000),
c( 0.8, 100.0000 ,100.0000 ,100.0000, 100.0000 , 100.0000 , 100.0000, 100.0000 , 100.0000 , 100.0000),
c( 0.9, 100.0000 ,100.0000 ,100.0000, 100.0000 , 100.0000 , 100.0000, 100.0000 , 100.0000 , 100.0000),
c( 1.0, 100.0000 ,100.0000 ,100.0000, 100.0000 , 100.0000 , 100.0000, 100.0000 , 100.0000 , 100.0000)), 2))
colnames(power_dt) = c("# of DIF Items", "Amount of DIF",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3")
kbl(power_dt, digits = 2) %>%
kable_classic(full_width = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
add_header_above(c(" " = 2, "1/2 ratio" = 3, "1/3 ratio" = 3, "1/4 ratio" = 3))
## sample size of 800
power_dt_800 = cbind(c(rep("One DIF Item", 10), rep("Two DIF Item", 10), rep("Four DIF Item", 10)),
round(rbind(c(0.1, 70.14  , 0.00  ,42.76, 68.76  , 0.00  ,46.53, 56.49  , 0.00 , 55.59),
c(0.2, 99.98 , 10.95 , 99.53,  99.78  , 8.90 , 99.56, 98.72 ,  2.47 , 98.69),
c(0.3, 100.00 , 91.69 ,100.00, 100.00 , 84.31, 100.00, 100.00 , 64.48 ,100.00),
c(0.4, 100.00, 100.00, 100.00,  100.00 , 99.93 ,100.00, 100.00 , 98.43 ,100.00),
c(0.5, 100.00, 100.00 ,100.00, 100.00, 100.00, 100.00,100.00 , 99.98, 100.00 ),
c(0.6, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00),
c(0.7, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00),
c(0.8, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00),
c(0.9, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00),
c(1.0, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00, 100.00, 100.00 ,100.00),
c(0.1, 72.225 ,  0.000 ,33.075,  64.900 ,  0.000 , 49.500, 59.20 ,  0.000 , 57.925),
c(0.2, 99.975  , 4.100, 95.225, 99.425  , 9.125 , 98.325, 98.80 ,  2.825 , 98.750),
c(0.3, 100.000 , 84.175, 99.850, 100.000 , 72.300 ,100.000, 100.00 , 54.925 ,100.000),
c(0.4, 100.000 ,100.000, 99.925, 100.000 , 99.850, 100.000, 100.00 , 98.450 ,100.000),
c(0.5, 100.000 ,100.000, 68.875,  100.000 ,100.000 , 100.000, 100.00 ,100.000, 100.000),
c(0.6,100.000, 100.000 ,33.275, 100.000 ,100.000 , 100.000,100.000 ,100.000 , 100.000),
c(0.7,100.000 ,100.000 ,15.625, 100.000 ,100.000 , 100.000,100.000 ,100.000 , 100.000),
c(0.8,100.000 ,100.000, 43.125, 100.000 ,100.000 , 100.000,100.000 ,100.000 , 100.000),
c(0.9,100.000 ,100.000, 90.675, 100.000 ,100.000 , 100.000,100.000 ,100.000 , 100.000),
c(1.0,100.000 ,100.000 ,96.925, 100.000 ,100.000 , 100.000,100.000 ,100.000 , 100.000),
c( 0.1, 70.2875  , 0.000  ,13.0500, 60.1125 ,  0.0000 , 25.0000, 59.5875  , 0.0000 , 41.0875),
c( 0.2, 99.2875  ,21.250  , 2.6875, 98.1750  ,13.7625 , 33.2250, 99.2000 ,  8.0875 , 85.3000),
c( 0.3, 100.0000 , 79.025 ,  9.4125,100.0000 , 76.5875 , 13.0125,100.0000 , 65.0625 , 62.6125 ),
c( 0.4, 100.0000 , 99.775 , 56.3250, 100.0000 , 98.8750 , 29.1625, 100.0000 , 98.6625 , 21.6625),
c( 0.5, 100.0000 ,100.000 ,100.0000, 100.0000 , 99.9000 , 92.0250, 100.0000, 100.0000, 55.3125),
c( 0.6, 100.0000, 100.000, 100.0000, 100.0000 ,100.0000 , 99.5875, 100.0000 ,100.0000 , 80.0750),
c( 0.7, 100.0000, 100.000, 100.0000, 100.0000 ,100.0000 ,100.0000, 100.0000, 100.0000 , 89.0875),
c( 0.8, 100.0000, 100.000, 100.0000, 100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000 ,100.0000),
c( 0.9, 100.0000, 100.000, 100.0000, 100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000 ,100.0000),
c( 1.0, 100.0000, 100.000, 100.0000, 100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000 ,100.0000))
, 2))
colnames(power_dt_800) = c("# of DIF Items", "Amount of DIF",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3")
kbl(power_dt_800, digits = 2) %>%
kable_classic(full_width = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
add_header_above(c(" " = 2, "1/2 ratio" = 3, "1/3 ratio" = 3, "1/4 ratio" = 3))
## sample size of 1200
power_dt_1200 = cbind(c(rep("One DIF Item", 10), rep("Two DIF Item", 10), rep("Four DIF Item", 10)),
round(rbind( c(0.1, 90.30  , 0.00 , 0.00, 87.52 ,  0.00  , 6.96, 81.27  , 0.00 , 17.03),
c(0.2, 100.00 ,  7.65,  8.35, 100.00  , 3.55 , 93.22,  99.99 ,  1.17 , 97.54),
c(0.3,100.00 , 96.10 ,53.45 , 100.00,  91.27 ,100.00, 100.00  ,73.63, 100.00),
c(0.4, 100.00 ,100.00 ,53.34,  100.00 ,100.00, 100.00, 100.00 , 99.92 ,100.00),
c(0.5, 100.00 ,100.00, 36.30, 100.00 ,100.00,100.00,100.00 ,100.00 ,100.00 ),
c(0.6, 100.00, 100.00, 25.09, 100.00 ,100.00, 100.00, 100.00, 100.00 ,100.00),
c(0.7,  100.00, 100.00 ,14.07, 100.00, 100.00,  94.33, 100.00, 100.00, 100.00),
c(0.8, 100.00 ,100.00, 25.34, 100.00, 100.00 , 79.88, 100.00, 100.00, 100.00),
c(0.9, 100.00, 100.00, 59.69, 100.00 ,100.00,  45.38, 100.00 ,100.00 , 99.94),
c(1.0, 100.00 ,100.00, 75.13, 100.00, 100.00 , 43.71, 100.00, 100.00 , 90.22),
c(0.1,  88.400  , 0.00  , 0.000,  78.55  , 0.000 ,  0.075,  77.675  , 0.000 , 24.175),
c(0.2, 100.000  , 1.20 ,  0.000, 100.00  , 2.125 ,  5.450, 99.825 ,  0.550 , 93.425),
c(0.3, 100.000  ,89.75  , 0.000, 100.00 , 75.000 ,  6.725,  100.000 , 53.325, 100.000),
c(0.4, 100.000 ,100.00  , 0.300, 100.00, 99.975 ,  0.050, 100.000 , 99.300 , 99.900),
c(0.5, 100.000 ,100.00 , 29.450,  100.00 ,100.000  , 1.975, 100.000 ,100.000, 100.000),
c(0.6, 100.000 ,100.00  ,99.825, 100.00 ,100.000 , 61.075,  100.000 ,100.000 , 77.200),
c(0.7, 100.000 ,100.00 ,100.000, 100.00 ,100.000 , 84.075, 100.000 ,100.000 , 45.375),
c(0.8, 100.000, 100.00 ,100.000,  100.00, 100.000 , 99.000, 100.000 ,100.000 , 20.800),
c(0.9, 100.000, 100.00, 100.000, 100.00, 100.000, 100.000, 100.000, 100.000,  60.350),
c(1.0, 100.000 ,100.00 ,100.000, 100.000 ,100.00 ,100.000,100.000 ,100.00, 85.275),
c(0.1,  89.7125,   0.000 ,  0.0000, 86.8000 ,  0.0000 ,  0.0000, 79.8625 ,  0.0000  , 1.3750),
c(0.2, 100.0000 , 33.925 ,  0.6625,  99.9750,  11.6750,   0.0000, 99.6000 , 13.3125  , 0.2500),
c(0.3, 100.0000,  91.125 , 91.8750, 100.0000 , 90.0875 , 61.8000, 100.0000 , 78.9250 ,  0.6625),
c(0.4, 100.0000 ,100.000 ,100.0000, 100.0000 , 99.9250 , 99.8125, 100.0000 , 98.4750 , 63.1125),
c(0.5, 100.0000 ,100.000, 100.0000, 100.0000, 100.0000, 100.0000,  100.0000 ,100.0000 , 94.7875),
c(0.6, 100.0000, 100.000 ,100.0000, 100.0000 ,100.0000 ,100.0000,100.0000, 100.0000 , 99.5250 ),
c(0.7, 100.0000 ,100.000 ,100.0000,100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000, 100.0000),
c(0.8, 100.0000 ,100.000 ,100.0000,100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000, 100.0000),
c(0.9,100.0000 ,100.000 ,100.0000,100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000, 100.0000 ),
c(1.0, 100.0000 ,100.000 ,100.0000,100.0000 ,100.0000 ,100.0000, 100.0000 ,100.0000, 100.0000)), 2))
colnames(power_dt_1200) = c("# of DIF Items", "Amount of DIF",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3",
"Criterion 1", "Criterion 2", "Criterion 3")
kbl(power_dt_1200, digits = 2) %>%
kable_classic(full_width = F) %>%
collapse_rows(columns = 1:2, valign = "top") %>%
add_header_above(c(" " = 2, "1/2 ratio" = 3, "1/3 ratio" = 3, "1/4 ratio" = 3))
140 / 357
 chr
55/135
218 / 469
###############################
### ptg main analysis script
###############################
library(tidyverse)
library(readxl)
library(metafor)
library(psych)
library(kableExtra)
setwd(dirname(rstudioapi::documentPath()))
## load data
shortlist = read_excel('effect_sizes_and_moderators.xlsx')
## look at how many studies uses PTGI
shortlist %>% group_by(`scale type`) %>% count() # 20 PTGI and 10 PTGI-SF
## we can do normalization or we can perform separate analysis for these two types of studies
## check the sample size
sum(shortlist$`sample size`) ## overall
PTGI_dat = shortlist %>% filter(`scale type` == 'PTGI')
PTGISF_dat = shortlist %>% filter(`scale type` != 'PTGI')
################################################################
################################################################
#### stretch PTGI-SF
PTGISF_transformed = PTGISF_dat %>% mutate(`effect size` = `effect size` / 10 * 21) %>%
mutate(sd = sqrt(sd^2 * 2.1^2))
PTGISF_transformed
PTGI = rbind(PTGI_dat, PTGISF_transformed)
head(PTGI)
### start analysis with all the studies (PTGI gets successfully transformed)
PTGI_num = sum((PTGI_dat$`sample size` - 1) * PTGI_dat$sd^2)
PTGI_denom = sum(PTGI_dat$`sample size`) - length(PTGI_dat$`sample size`)
PTGI_sp = PTGI_num / PTGI_denom
PTGI_pooled_sd = sqrt(PTGI_sp)
PTGI_pooled_sd
cutoff = 45
PTGI_g = PTGI %>%
mutate(PTGI_num = (sum(`sample size`) - 1) * sd^2) %>%
mutate(PTGI_denom = sum(`sample size`) - length(`sample size`)) %>%
mutate(PTGI_pooled_sd = sqrt(PTGI_num / PTGI_denom)) %>%
mutate(g = (`effect size` - cutoff) / PTGI_pooled_sd) %>%
mutate(v_g = 2 * (1 - 0) / (`sample size`) + g^2 / (2 * (`sample size` - 1)))
## now we have the ingredient to perform meta analysis
PTGI_g[,c('g', 'v_g')]
## we run intercept only model for main analysis (this would be random intercept model)
main_analysis_model_PTGI = rma(g ~ 1, vi = v_g, data = PTGI_g)
main_analysis_model_PTGI
################################################################
## Subgroup analysis
################################################################
## PTSD
PTGI_PTSD = rma(g ~ PTSD, vi = v_g, data = PTGI_g)
PTGI_PTSD
sum(PTGI_g$`sample size` * PTGI_g$PTSD)
PTGI_g$Source[ifelse(PTGI_g$PTSD == 1, TRUE, FALSE)]
### Anxiety Scales
PTGI_Anxiety = rma(g ~ Anxiety, vi = v_g, data = PTGI_g)
PTGI_Anxiety
sum(PTGI_g$Anxiety)
sum(PTGI_g$`sample size` * PTGI_g$Anxiety)
PTGI_g$Source[ifelse(PTGI_g$Anxiety == 1, TRUE, FALSE)]
### Depression Scales
PTGI_Depression = rma(g ~ Depression, vi = v_g, data = PTGI_g)
PTGI_Depression
sum(PTGI_g$Depression)
sum(PTGI_g$`sample size` * PTGI_g$Depression)
PTGI_g$Source[ifelse(PTGI_g$Depression == 1, TRUE, FALSE)]
### social support scales
PTGI_Support = rma(g ~ `Social Support`, vi = v_g, data = PTGI_g)
PTGI_Support
sum(PTGI_g$`Social Support`)
sum(PTGI_g$`sample size` * PTGI_g$`Social Support`)
PTGI_g$Source[ifelse(PTGI_g$`Social Support` == 1, TRUE, FALSE)]
## coping scales
PTGI_Coping = rma(g ~ `Coping`, vi = v_g, data = PTGI_g)
PTGI_Coping
sum(PTGI_g$`Coping`)
sum(PTGI_g$`sample size` * PTGI_g$`Coping`)
PTGI_g$Source[ifelse(PTGI_g$`Coping` == 1, TRUE, FALSE)]
### religion scales
PTGI_religion = rma(g ~ `Sprituality/Religion`, vi = v_g, data = PTGI_g)
PTGI_religion
sum(PTGI_g$`Sprituality/Religion`)
sum(PTGI_g$`sample size` * PTGI_g$`Sprituality/Religion`)
PTGI_g$Source[ifelse(PTGI_g$`Sprituality/Religion` == 1, TRUE, FALSE)]
### coping and anxiety are significant with coping clearly significant.
################################################################
## Tables and Figures
################################################################
## forest plot
ptsd_sample = PTGI_g %>% filter(`PTSD` == 1) %>% dplyr::select(Source, `sample size`)
forest(main_analysis_model_PTGI,
header="Author(s) and Year", mlab="", shade=TRUE,
cex=0.75)
## create tables for main analysis (table 1 in the manuscript)
PTGI_main_analysis_table = PTGI_g %>% dplyr::select(Source, `sample size`,
`effect size`, sd, `Mean Age`, Countries, Groups) %>%
mutate(`effect size` = round(`effect size`,2)) %>%
mutate(`Mean Age` = round( as.numeric(`Mean Age`),2)) %>%
mutate(sd = round(sd,2))
## this is table 1
table_1 = PTGI_main_analysis_table %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
# table_1 %>% as_image(width = 4)
PTGI_main_analysis_table[1:40,] %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
PTGI_main_analysis_table[40:75,] %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
## create tables for subgroup analysis (table 3 in the manuscript
PTGI_subgroup = PTGI %>% dplyr::select("Source","PTSD", "Anxiety",
"Depression", "Social Support",
"Coping","Sprituality/Religion") %>%
mutate(PTSD = ifelse(PTSD == 1, '✔', ' ')) %>%
mutate(Anxiety = ifelse(Anxiety == 1, '✔', ' ')) %>%
mutate(Depression = ifelse(Depression == 1, '✔', ' ')) %>%
mutate(`Social Support` = ifelse(`Social Support` == 1, '✔', ' ')) %>%
mutate(Coping = ifelse(Coping == 1, '✔', ' ')) %>%
mutate(`Sprituality/Religion` = ifelse(`Sprituality/Religion` == 1, '✔', ' '))
## this is table 3
PTGI_subgroup[1:40, ]  %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
PTGI_subgroup[41:75, ]  %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
## check age range
range(as.numeric(PTGI_g$`Mean Age`)[!is.na(as.numeric(PTGI_g$`Mean Age`))])
which(as.numeric(PTGI_g$`Mean Age`) == 16)
PTGI_g$Source
161/278
167/278
57/135
228/469
469 / 2
17.76 + 57.28 + 105.81 + 14.42 + 38.10 + 71 + 24.47 + 65.89 + 35 + 34.22 + 43.52 + 61.59 + 20.78 + 14.42 + 58.85 + 87.05 + 17.76 + 20.95 + 50.10 + 17.76 + 87.82 + 67.17
1011.72 / 2
67.17 + 87.05 + 105.81
17.76 + 17.76 + 17.76
50.10 + 57.28
43.52 + 65.89 + 38.10
260.03 / 2
87.82 / 2
53.28 / 2
107.38 / 2
20.95/2
35/2
20.78 /2
147.51/2
71/2
71*3
213 /2
180/278
180/232
65/253
90/253
156/253
13.06 * 4
60 + 1180
870 / 4
750 / 4
400 / 4
2.18 * 30
18/250
773.32 - 118
655.32 / 3
104/250
38/346
main_analysis_model_PTGI
main_analysis_model_PTGI %>%   kbl()
install.packages('modelsummary')
library(modelsummary)
msummary(models, output = 'kableExtra')
msummary(main_analysis_model_PTGI, output = 'kableExtra')
main_analysis_model_PTGI
line1 = c(" ", "Estimate", "se", 'Z', 'p', 'CI LB', 'CI UP', ' ')
line2 = c('Intercept', '1.95', '0.62', '3.16', '0.74', '3.16', ' ')
line3= c(' Heterogeneity Statistics', ' ', ' ', ' ', ' ', ' ', ' ', ' ')
line4 = c(" ", "Tau", "Tau^2", 'I^2', 'H^2', 'df', 'Q', 'p')
line5 = c(" ", "5.34", "28.47", '99.99%', '9695', '74', '15829', '< 0.001')
rbind(line1,line2, line3, line4, line5)
line1 = c(" ", "Estimate", "se", 'Z', 'p', 'CI LB', 'CI UP', ' ')
line2 = c('Intercept', '1.95', '0.62', '3.16', '0.002', '0.74', '3.16', ' ')
line3= c(' Heterogeneity Statistics', ' ', ' ', ' ', ' ', ' ', ' ', ' ')
line4 = c(" ", "Tau", "Tau^2", 'I^2', 'H^2', 'df', 'Q', 'p')
line5 = c(" ", "5.34", "28.47", '99.99%', '9695', '74', '15829', '< 0.001')
rbind(line1,line2, line3, line4, line5)
table2 = rbind(line1,line2, line3, line4, line5)
table2
kbl(table2)
table2 = rbind(c(" ", "Estimate", "se", 'Z', 'p', 'CI LB', 'CI UP', ' '),
c('Intercept', '1.95', '0.62', '3.16', '0.002', '0.74', '3.16', ' '),
c(' Heterogeneity Statistics', ' ', ' ', ' ', ' ', ' ', ' ', ' '),
c(" ", "Tau", "Tau^2", 'I^2', 'H^2', 'df', 'Q', 'p'),
c(" ", "5.34", "28.47", '99.99%', '9695', '74', '15829', '< 0.001'))
kbl(table2)
kbl(table2) %>% kable_classic(full_width = F, html_font = "Cambria")
table2 = rbind(c('Random Effects Model (k=75)', ' ', ' ', ' ', ' ', ' ', ' ', ' '),
c(" ", "Estimate", "se", 'Z', 'p', 'CI LB', 'CI UP', ' '),
c('Intercept', '1.95', '0.62', '3.16', '0.002', '0.74', '3.16', ' '),
c(' Heterogeneity Statistics', ' ', ' ', ' ', ' ', ' ', ' ', ' '),
c(" ", "Tau", "Tau^2", 'I^2', 'H^2', 'df', 'Q', 'p'),
c(" ", "5.34", "28.47", '99.99%', '9695', '74', '15829', '< 0.001'))
kbl(table2) %>% kable_classic(full_width = F, html_font = "Cambria")
PTGI_subgroup[41:75, ]  %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
PTGI_subgroup
tibble(table2)
kbl(tibble(table2)) %>% kable_classic(full_width = F, html_font = "Cambria")
kbl(table2) %>% kable_classic(full_width = F, html_font = "Cambria")
kbl(table2) %>% kable_classic(full_width = F, html_font = "Cambria") %>%
row_spec(x, 2, hline_after = TRUE)
kbl(table2) %>% kable_classic(full_width = F, html_font = "Cambria") %>%
row_spec(2, hline_after = TRUE)
kbl(table2) %>% kable_classic(full_width = F, html_font = "Cambria") %>%
row_spec(1, hline_after = TRUE)
row_spec(x,1, hline_after = TRUE)
x = kbl(table2) %>% kable_classic(full_width = F, html_font = "Cambria")
row_spec(x,1, hline_after = TRUE)
PTGI_PTSD
PTGI_PTSD
PTGI_g$Anxiety
sum(PTGI_g$Anxiety)
sum(PTGI_g$Depression)
sum(PTGI_g$PTSD)
sum(PTGI_g$`Social Support`)
sum(PTGI_g$Coping)
sum(PTGI_g$`Sprituality/Religion`)
## table 4
Correlate = c('Anxiety', 'Depression', 'PTSD', 'Social Support', 'Coping', 'Spirituality')
K = c(28, 19, 20, 17, 38, 25)
N = c(19522, 21802, 24033, 20912, 23386, 15263)
CI_lower = c(-4.83, 0.15, -0.42, -1.61, 0.02, -0.93)
CI_upper = c(0.13, -4.93, 1.49, 4.24, 4.82, 4.24)
I2 = c(99.99, 99.99, 99.99, 99.99, 99.99, 99.99)
data.frame(Correlate, K,N,CI_lower, CI_upper, I2)
kbl(data.frame(Correlate, K,N,CI_lower, CI_upper, I2))
kbl(data.frame(Correlate, K,N,CI_lower, CI_upper, I2)) %>% kable_classic(full_width = F, html_font = "Cambria")
94/2
49/94
43/346
57/346
5000 * 1.2
data_generation = function(N, J, tau, beta, alpha){
# time matrix without DIF
time_matrix = matrix(NA, nrow = N, ncol = J)
for(i in 1:N){
for(j in 1:J){
log.t = rnorm(1, beta[j] - tau[i], sd = 1/alpha[j])
if(log.t < 0){
while(log.t < 0){
log.t = rnorm(1, beta[j] - tau[i], sd = 1/alpha[j])
}
}
time_matrix[i, j] = log.t
}
}
return(time_matrix)
}
# Example usage
N = 1000
J = 20
tau_i = round(rnorm(N, 0, 0.3), 3)
beta_j = round(rnorm(J, 4, 0.45), 3)
alpha_j = round(rnorm(J, 1.85, 0.15), 3)
### so that's the target distribution / this is an experiment with normal cdf and pdf
## thus it should work with the log normal distribution.
cut_point = 0.8
pdf_dist = rnorm(1000, 0, 1)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
mean(target_function)
sd(target_function)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
### now let's do rejection sampling
cut_point = 0.8
M = 2
counter = 1
sampler = c()
while(counter < 10000){
u = runif(n = 1, min = 0, max = 1)
y = rnorm(n = 1, mean = 0, sd = 1)
fy = y * (1 - pnorm(cut_point, 0, 1))^(y > cut_point)
left_side = fy / (M * y)
if(u < left_side){
sampler = c(sampler, y)
}
counter = counter + 1
}
hist(sampler, breaks = 30)
mean(sampler)
sd(sampler)
6000 * 12
