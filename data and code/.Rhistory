# Bias = mean(estimated - true)
# For censored model
bias_tau_censored = mean(estimated_tau_censored - tau)
bias_beta_censored = mean(estimated_beta_censored - beta)
bias_alpha_censored = mean(estimated_alpha_censored - alpha)
# For uncensored model
bias_tau_uncensored = mean(estimated_tau_uncensored - tau)
bias_beta_uncensored = mean(estimated_beta_uncensored - beta)
bias_alpha_uncensored = mean(estimated_alpha_uncensored - alpha)
# Print overall bias results
cat("\nCensored Model Overall Bias:\n")
cat("tau bias:", round(bias_tau_censored, 4), "\n")
cat("beta bias:", round(bias_beta_censored, 4), "\n")
cat("alpha bias:", round(bias_alpha_censored, 4), "\n")
cat("\nUncensored Model Overall Bias:\n")
cat("tau bias:", round(bias_tau_uncensored, 4), "\n")
cat("beta bias:", round(bias_beta_uncensored, 4), "\n")
cat("alpha bias:", round(bias_alpha_uncensored, 4), "\n")
# Calculate individual biases
bias_individual_tau_censored = estimated_tau_censored - tau
bias_individual_beta_censored = estimated_beta_censored - beta
bias_individual_alpha_censored = estimated_alpha_censored - alpha
bias_individual_tau_uncensored = estimated_tau_uncensored - tau
bias_individual_beta_uncensored = estimated_beta_uncensored - beta
bias_individual_alpha_uncensored = estimated_alpha_uncensored - alpha
# Create bias plots
par(mfrow = c(2,3))
# Tau bias plots
plot(tau, bias_individual_tau_censored,
main = "Tau Bias (Censored)",
xlab = "True tau", ylab = "Bias",
pch = 1)
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_censored, col = "red", lty = 2)
plot(tau, bias_individual_tau_uncensored,
main = "Tau Bias (Uncensored)",
xlab = "True tau", ylab = "Bias",
pch = 1, col = "red")
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_uncensored, col = "red", lty = 2)
# Beta bias plots
plot(beta, bias_individual_beta_censored,
main = "Beta Bias (Censored)",
xlab = "True beta", ylab = "Bias",
pch = 1)
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_censored, col = "red", lty = 2)
plot(beta, bias_individual_beta_uncensored,
main = "Beta Bias (Uncensored)",
xlab = "True beta", ylab = "Bias",
pch = 1, col = "red")
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_uncensored, col = "red", lty = 2)
# Alpha bias plots
plot(alpha, bias_individual_alpha_censored,
main = "Alpha Bias (Censored)",
xlab = "True alpha", ylab = "Bias",
pch = 1)
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_censored, col = "red", lty = 2)
plot(alpha, bias_individual_alpha_uncensored,
main = "Alpha Bias (Uncensored)",
xlab = "True alpha", ylab = "Bias",
pch = 1, col = "red")
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_uncensored, col = "red", lty = 2)
# Add summary statistics for individual biases
cat("\nCensored Model Bias Summary Statistics:\n")
cat("tau bias SD:", round(sd(bias_individual_tau_censored), 4), "\n")
cat("beta bias SD:", round(sd(bias_individual_beta_censored), 4), "\n")
cat("alpha bias SD:", round(sd(bias_individual_alpha_censored), 4), "\n")
cat("\nUncensored Model Bias Summary Statistics:\n")
cat("tau bias SD:", round(sd(bias_individual_tau_uncensored), 4), "\n")
cat("beta bias SD:", round(sd(bias_individual_beta_uncensored), 4), "\n")
cat("alpha bias SD:", round(sd(bias_individual_alpha_uncensored), 4), "\n")
# Calculate relative bias (as percentage)
rel_bias_tau_censored = 100 * mean((estimated_tau_censored - tau)/tau)
rel_bias_beta_censored = 100 * mean((estimated_beta_censored - beta)/beta)
rel_bias_alpha_censored = 100 * mean((estimated_alpha_censored - alpha)/alpha)
rel_bias_tau_uncensored = 100 * mean((estimated_tau_uncensored - tau)/tau)
rel_bias_beta_uncensored = 100 * mean((estimated_beta_uncensored - beta)/beta)
rel_bias_alpha_uncensored = 100 * mean((estimated_alpha_uncensored - alpha)/alpha)
cat("\nCensored Model Relative Bias (%):\n")
cat("tau relative bias:", round(rel_bias_tau_censored, 2), "%\n")
cat("beta relative bias:", round(rel_bias_beta_censored, 2), "%\n")
cat("alpha relative bias:", round(rel_bias_alpha_censored, 2), "%\n")
cat("\nUncensored Model Relative Bias (%):\n")
cat("tau relative bias:", round(rel_bias_tau_uncensored, 2), "%\n")
cat("beta relative bias:", round(rel_bias_beta_uncensored, 2), "%\n")
cat("alpha relative bias:", round(rel_bias_alpha_uncensored, 2), "%\n")
# Reset plot parameters
par(mfrow = c(1,1))
# Calculate biases
# Absolute bias
abs_bias_censored <- data.frame(
tau = estimated_tau_censored - tau,
beta = estimated_beta_censored - beta,
alpha = estimated_alpha_censored - alpha
)
abs_bias_uncensored <- data.frame(
tau = estimated_tau_uncensored - tau,
beta = estimated_beta_uncensored - beta,
alpha = estimated_alpha_uncensored - alpha
)
# Relative bias
rel_bias_censored <- data.frame(
tau = 100 * (estimated_tau_censored - tau)/tau,
beta = 100 * (estimated_beta_censored - beta)/beta,
alpha = 100 * (estimated_alpha_censored - alpha)/alpha
)
rel_bias_uncensored <- data.frame(
tau = 100 * (estimated_tau_uncensored - tau)/tau,
beta = 100 * (estimated_beta_uncensored - beta)/beta,
alpha = 100 * (estimated_alpha_uncensored - alpha)/alpha
)
# Create plots
par(mfrow = c(3,2), mar = c(4,4,3,1))
# Tau comparison
plot(tau, abs_bias_censored$tau,
main = paste("Tau Absolute Bias\nCensoring Rate:", round(raw_data$censor_rate, 3)),
xlab = "True tau", ylab = "Absolute Bias",
pch = 1, ylim = range(c(abs_bias_censored$tau, abs_bias_uncensored$tau)))
points(tau, abs_bias_uncensored$tau, col = "red", pch = 19)
abline(h = 0, col = "blue", lty = 2)
abline(h = mean(abs_bias_censored$tau), col = "black", lty = 2)
abline(h = mean(abs_bias_uncensored$tau), col = "red", lty = 2)
legend("topleft",
legend = c("Censored", "Uncensored"),
pch = c(1, 19),
col = c("black", "red"))
plot(tau, rel_bias_censored$tau,
main = "Tau Relative Bias (%)",
xlab = "True tau", ylab = "Relative Bias (%)",
pch = 1, ylim = range(c(rel_bias_censored$tau, rel_bias_uncensored$tau)))
points(tau, rel_bias_uncensored$tau, col = "red", pch = 19)
abline(h = 0, col = "blue", lty = 2)
abline(h = mean(rel_bias_censored$tau), col = "black", lty = 2)
abline(h = mean(rel_bias_uncensored$tau), col = "red", lty = 2)
# Beta comparison
plot(beta, abs_bias_censored$beta,
main = "Beta Absolute Bias",
xlab = "True beta", ylab = "Absolute Bias",
pch = 1, ylim = range(c(abs_bias_censored$beta, abs_bias_uncensored$beta)))
cat("\nCensored Model Relative Bias (%):\n")
cat("tau relative bias:", round(rel_bias_tau_censored, 2), "%\n")
cat("beta relative bias:", round(rel_bias_beta_censored, 2), "%\n")
cat("alpha relative bias:", round(rel_bias_alpha_censored, 2), "%\n")
cat("\nUncensored Model Relative Bias (%):\n")
cat("tau relative bias:", round(rel_bias_tau_uncensored, 2), "%\n")
cat("beta relative bias:", round(rel_bias_beta_uncensored, 2), "%\n")
cat("alpha relative bias:", round(rel_bias_alpha_uncensored, 2), "%\n")
# First verify dimensions
cat("Dimensions check:\n")
cat("tau length:", length(tau), "\n")
cat("beta length:", length(beta), "\n")
cat("alpha length:", length(alpha), "\n")
cat("estimated tau length:", length(estimated_tau_censored), "\n")
cat("estimated beta length:", length(estimated_beta_censored), "\n")
cat("estimated alpha length:", length(estimated_alpha_censored), "\n")
# Calculate biases
# Absolute bias
abs_bias_censored <- list(
tau = estimated_tau_censored - tau,
beta = estimated_beta_censored - beta,
alpha = estimated_alpha_censored - alpha
)
abs_bias_uncensored <- list(
tau = estimated_tau_uncensored - tau,
beta = estimated_beta_uncensored - beta,
alpha = estimated_alpha_uncensored - alpha
)
# Relative bias
rel_bias_censored <- list(
tau = 100 * (estimated_tau_censored - tau)/tau,
beta = 100 * (estimated_beta_censored - beta)/beta,
alpha = 100 * (estimated_alpha_censored - alpha)/alpha
)
rel_bias_uncensored <- list(
tau = 100 * (estimated_tau_uncensored - tau)/tau,
beta = 100 * (estimated_beta_uncensored - beta)/beta,
alpha = 100 * (estimated_alpha_uncensored - alpha)/alpha
)
# Create plots
par(mfrow = c(3,2), mar = c(4,4,3,1))
# Tau comparison
plot(tau, abs_bias_censored$tau,
main = paste("Tau Absolute Bias\nCensoring Rate:", round(raw_data$censor_rate, 3)),
xlab = "True tau", ylab = "Absolute Bias",
pch = 1)
points(tau, abs_bias_uncensored$tau, col = "red", pch = 19)
abline(h = 0, col = "blue", lty = 2)
abline(h = mean(abs_bias_censored$tau), col = "black", lty = 2)
abline(h = mean(abs_bias_uncensored$tau), col = "red", lty = 2)
legend("topleft",
legend = c("Censored", "Uncensored"),
pch = c(1, 19),
col = c("black", "red"))
plot(tau, rel_bias_censored$tau,
main = "Tau Relative Bias (%)",
xlab = "True tau", ylab = "Relative Bias (%)",
pch = 1)
points(tau, rel_bias_uncensored$tau, col = "red", pch = 19)
abline(h = 0, col = "blue", lty = 2)
abline(h = mean(rel_bias_censored$tau), col = "black", lty = 2)
abline(h = mean(rel_bias_uncensored$tau), col = "red", lty = 2)
# Beta comparison
plot(beta, abs_bias_censored$beta,
main = "Beta Absolute Bias",
xlab = "True beta", ylab = "Absolute Bias",
pch = 1)
points(beta, abs_bias_uncensored$beta, col = "red", pch = 19)
abline(h = 0, col = "blue", lty = 2)
abline(h = mean(abs_bias_censored$beta), col = "black", lty = 2)
abline(h = mean(abs_bias_uncensored$beta), col = "red", lty = 2)
plot(beta, rel_bias_censored$beta,
main = "Beta Relative Bias (%)",
xlab = "True beta", ylab = "Relative Bias (%)",
pch = 1)
points(beta, rel_bias_uncensored$beta, col = "red", pch = 19)
abline(h = 0, col = "blue", lty = 2)
abline(h = mean(rel_bias_censored$beta), col = "black", lty = 2)
abline(h = mean(rel_bias_uncensored$beta), col = "red", lty = 2)
# Alpha comparison
plot(alpha, abs_bias_censored$alpha,
main = "Alpha Absolute Bias",
xlab = "True alpha", ylab = "Absolute Bias",
pch = 1)
points(alpha, abs_bias_uncensored$alpha, col = "red", pch = 19)
abline(h = 0, col = "blue", lty = 2)
abline(h = mean(abs_bias_censored$alpha), col = "black", lty = 2)
abline(h = mean(abs_bias_uncensored$alpha), col = "red", lty = 2)
plot(alpha, rel_bias_censored$alpha,
main = "Alpha Relative Bias (%)",
xlab = "True alpha", ylab = "Relative Bias (%)",
pch = 1)
points(alpha, rel_bias_uncensored$alpha, col = "red", pch = 19)
abline(h = 0, col = "blue", lty = 2)
abline(h = mean(rel_bias_censored$alpha), col = "black", lty = 2)
abline(h = mean(rel_bias_uncensored$alpha), col = "red", lty = 2)
# Print summary statistics
cat("\nAbsolute Bias Summary:\n")
cat("\nCensored Model:\n")
cat("tau:", round(mean(abs_bias_censored$tau), 4), "(SD =",
round(sd(abs_bias_censored$tau), 4), ")\n")
cat("beta:", round(mean(abs_bias_censored$beta), 4), "(SD =",
round(sd(abs_bias_censored$beta), 4), ")\n")
cat("alpha:", round(mean(abs_bias_censored$alpha), 4), "(SD =",
round(sd(abs_bias_censored$alpha), 4), ")\n")
cat("\nRelative Bias Summary (%):\n")
cat("\nCensored Model:\n")
cat("tau:", round(mean(rel_bias_censored$tau), 2), "% (SD =",
round(sd(rel_bias_censored$tau), 2), "%)\n")
cat("beta:", round(mean(rel_bias_censored$beta), 2), "% (SD =",
round(sd(rel_bias_censored$beta), 2), "%)\n")
cat("alpha:", round(mean(rel_bias_censored$alpha), 2), "% (SD =",
round(sd(rel_bias_censored$alpha), 2), "%)\n")
# Reset plot parameters
par(mfrow = c(1,1))
library(numDeriv)
set.seed(12345)
# setting up
N <- 50
J <- 10
tau <- round(rnorm(N, 0, 0.25), 3)
beta <- round(rnorm(J, 1.8, 0.25), 3)
alpha <- round(runif(J, 1.75, 3.25), 3)
# data generation function
generate_data <- function(N, J, true_tau, true_beta, true_alpha, c) {
time_matrix <- matrix(nrow = N, ncol = J)
for(j in 1:J) {
for(i in 1:N) {
time_matrix[i,j] <- rlnorm(1, meanlog = true_beta[j] - true_tau[i],
sdlog = 1/true_alpha[j])
}
}
censored <- time_matrix > c
censored_data <- pmin(time_matrix, c)
censor_rate <- sum(censored) / (N*J)
return(list(time_matrix = time_matrix,
censored_data = censored_data,
censored = censored,
censor_rate = censor_rate))
}
## change here
c <- 6
raw_data <- generate_data(N, J, tau, beta, alpha, c)
## log-likelihood censored
log_likelihood_censored <- function(params, dat, censored, N, J, time_limit) {
tau <- params[1:N]
alpha <- params[(N+1):(N+J)]
beta <- params[(N+J+1):(N+2*J)]
ll <- 0
for(j in 1:J) {
for(i in 1:N) {
if(!censored[i,j]) {
#  uncensored observations
non_exp_part <- alpha[j] / (dat[i,j] * sqrt(2 * pi))
exponent <- -0.5 * (alpha[j] * (log(dat[i,j]) - beta[j] + tau[i]))^2
ll <- ll + log(non_exp_part) + exponent
} else {
#  censored observations - use survival function
z <- alpha[j] * (log(time_limit) - beta[j] + tau[i])
ll <- ll + pnorm(z, lower.tail = FALSE, log.p = TRUE)
}
}
}
return(-ll)
}
## log-likelihood uncensored
log_likelihood_uncensored <- function(params, dat, N, J) {
tau <- params[1:N]
alpha <- params[(N+1):(N+J)]
beta <- params[(N+J+1):(N+2*J)]
ll <- 0
for(j in 1:J) {
for(i in 1:N) {
# For all observations
non_exp_part <- alpha[j] / (dat[i,j] * sqrt(2 * pi))
exponent <- -0.5 * (alpha[j] * (log(dat[i,j]) - beta[j] + tau[i]))^2
ll <- ll + log(non_exp_part) + exponent
}
}
return(-ll)
}
# parameter bounds
lower_bounds <- c(rep(-Inf, N),    # tau: unbounded
rep(1.75, J),     # alpha: lower bound
rep(-Inf, J))     # beta: unbounded
upper_bounds <- c(rep(Inf, N),     # tau: unbounded
rep(3.25, J),     # alpha: upper bound
rep(Inf, J))      # beta: unbounded
# initialize parameter values
init_params <- c(rep(0, N),        # tau starts at 0
rep(2.5, J),       # alpha starts at middle of range
rep(1.8, J))       # beta starts at prior mean
# set stopping rule
max_iter <- 1
tolerance <- 0.0000001
# censored model
prev_ll <- 0
for(iter in 1:max_iter) {
optim_result_censored <- optim(init_params,
log_likelihood_censored,
dat = raw_data$censored_data,
censored = raw_data$censored,
N = N,
J = J,
time_limit = c,
method = "L-BFGS-B",
lower = lower_bounds,
upper = upper_bounds)
if(abs(prev_ll - optim_result_censored$value) < tolerance) {
break
}
prev_ll <- optim_result_censored$value
init_params <- optim_result_censored$par
}
# uncensored model
prev_ll <- 0
init_params <- c(rep(0, N), rep(2.5, J), rep(1.8, J))
for(iter in 1:max_iter) {
optim_result_uncensored <- optim(init_params,
log_likelihood_uncensored,
dat = raw_data$censored_data,
N = N,
J = J,
method = "L-BFGS-B",
lower = lower_bounds,
upper = upper_bounds)
if(abs(prev_ll - optim_result_uncensored$value) < tolerance) {
break
}
prev_ll <- optim_result_uncensored$value
init_params <- optim_result_uncensored$par
}
# estimated parameters
estimated_tau_censored <- optim_result_censored$par[1:N]
estimated_alpha_censored <- optim_result_censored$par[(N+1):(N+J)]
estimated_beta_censored <- optim_result_censored$par[(N+J+1):(N+2*J)]
estimated_tau_uncensored <- optim_result_uncensored$par[1:N]
estimated_alpha_uncensored <- optim_result_uncensored$par[(N+1):(N+J)]
estimated_beta_uncensored <- optim_result_uncensored$par[(N+J+1):(N+2*J)]
#  results
par(mfrow = c(1,3))
# tau
plot(tau, estimated_tau_censored,
main = paste("tau (censoring rate:", round(raw_data$censor_rate, 3), ")"),
xlab = "True tau", ylab = "Estimated tau",
pch = 1)
points(tau, estimated_tau_uncensored, col = "red", pch = 19)
abline(0, 1, col = "blue")
legend("topleft",
legend = c("Censored Model", "Uncensored Model"),
pch = c(1, 19),
col = c("black", "red"))
# alpha
plot(alpha, estimated_alpha_censored,
main = "alpha",
xlab = "True alpha", ylab = "Estimated alpha",
pch = 1)
points(alpha, estimated_alpha_uncensored, col = "red", pch = 19)
abline(0, 1, col = "blue")
# beta
plot(beta, estimated_beta_censored,
main = "beta",
xlab = "True beta", ylab = "Estimated beta",
pch = 1)
points(beta, estimated_beta_uncensored, col = "red", pch = 19)
abline(0, 1, col = "blue")
### diagnostics
# mse
cat("\nCensored Model MSE:\n")
cat("tau MSE:", mean((tau - estimated_tau_censored)^2), "\n")
cat("alpha MSE:", mean((alpha - estimated_alpha_censored)^2), "\n")
cat("beta MSE:", mean((beta - estimated_beta_censored)^2), "\n")
cat("\nUncensored Model MSE:\n")
cat("tau MSE:", mean((tau - estimated_tau_uncensored)^2), "\n")
cat("alpha MSE:", mean((alpha - estimated_alpha_uncensored)^2), "\n")
cat("beta MSE:", mean((beta - estimated_beta_uncensored)^2), "\n")
# Calculate bias for each parameter
# Bias = mean(estimated - true)
# For censored model
bias_tau_censored = mean(estimated_tau_censored - tau)
bias_beta_censored = mean(estimated_beta_censored - beta)
bias_alpha_censored = mean(estimated_alpha_censored - alpha)
# For uncensored model
bias_tau_uncensored = mean(estimated_tau_uncensored - tau)
bias_beta_uncensored = mean(estimated_beta_uncensored - beta)
bias_alpha_uncensored = mean(estimated_alpha_uncensored - alpha)
# Print overall bias results
cat("\nCensored Model Overall Bias:\n")
cat("tau bias:", round(bias_tau_censored, 4), "\n")
cat("beta bias:", round(bias_beta_censored, 4), "\n")
cat("alpha bias:", round(bias_alpha_censored, 4), "\n")
cat("\nUncensored Model Overall Bias:\n")
cat("tau bias:", round(bias_tau_uncensored, 4), "\n")
cat("beta bias:", round(bias_beta_uncensored, 4), "\n")
cat("alpha bias:", round(bias_alpha_uncensored, 4), "\n")
# Calculate individual biases
bias_individual_tau_censored = estimated_tau_censored - tau
bias_individual_beta_censored = estimated_beta_censored - beta
bias_individual_alpha_censored = estimated_alpha_censored - alpha
bias_individual_tau_uncensored = estimated_tau_uncensored - tau
bias_individual_beta_uncensored = estimated_beta_uncensored - beta
bias_individual_alpha_uncensored = estimated_alpha_uncensored - alpha
# Create bias plots
par(mfrow = c(2,3))
# Tau bias plots
plot(tau, bias_individual_tau_censored,
main = "Tau Bias (Censored)",
xlab = "True tau", ylab = "Bias",
pch = 1)
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_censored, col = "red", lty = 2)
plot(tau, bias_individual_tau_uncensored,
main = "Tau Bias (Uncensored)",
xlab = "True tau", ylab = "Bias",
pch = 1, col = "red")
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_uncensored, col = "red", lty = 2)
# Beta bias plots
plot(beta, bias_individual_beta_censored,
main = "Beta Bias (Censored)",
xlab = "True beta", ylab = "Bias",
pch = 1)
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_censored, col = "red", lty = 2)
plot(beta, bias_individual_beta_uncensored,
main = "Beta Bias (Uncensored)",
xlab = "True beta", ylab = "Bias",
pch = 1, col = "red")
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_uncensored, col = "red", lty = 2)
# Alpha bias plots
plot(alpha, bias_individual_alpha_censored,
main = "Alpha Bias (Censored)",
xlab = "True alpha", ylab = "Bias",
pch = 1)
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_censored, col = "red", lty = 2)
plot(alpha, bias_individual_alpha_uncensored,
main = "Alpha Bias (Uncensored)",
xlab = "True alpha", ylab = "Bias",
pch = 1, col = "red")
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_uncensored, col = "red", lty = 2)
# Add summary statistics for individual biases
cat("\nCensored Model Bias Summary Statistics:\n")
cat("tau bias SD:", round(sd(bias_individual_tau_censored), 4), "\n")
cat("beta bias SD:", round(sd(bias_individual_beta_censored), 4), "\n")
cat("alpha bias SD:", round(sd(bias_individual_alpha_censored), 4), "\n")
cat("\nUncensored Model Bias Summary Statistics:\n")
cat("tau bias SD:", round(sd(bias_individual_tau_uncensored), 4), "\n")
cat("beta bias SD:", round(sd(bias_individual_beta_uncensored), 4), "\n")
cat("alpha bias SD:", round(sd(bias_individual_alpha_uncensored), 4), "\n")
# Calculate relative bias (as percentage)
rel_bias_tau_censored = 100 * mean((estimated_tau_censored - tau)/tau)
rel_bias_beta_censored = 100 * mean((estimated_beta_censored - beta)/beta)
rel_bias_alpha_censored = 100 * mean((estimated_alpha_censored - alpha)/alpha)
rel_bias_tau_uncensored = 100 * mean((estimated_tau_uncensored - tau)/tau)
rel_bias_beta_uncensored = 100 * mean((estimated_beta_uncensored - beta)/beta)
rel_bias_alpha_uncensored = 100 * mean((estimated_alpha_uncensored - alpha)/alpha)
cat("\nCensored Model Relative Bias (%):\n")
cat("tau relative bias:", round(rel_bias_tau_censored, 2), "%\n")
cat("beta relative bias:", round(rel_bias_beta_censored, 2), "%\n")
cat("alpha relative bias:", round(rel_bias_alpha_censored, 2), "%\n")
cat("\nUncensored Model Relative Bias (%):\n")
cat("tau relative bias:", round(rel_bias_tau_uncensored, 2), "%\n")
cat("beta relative bias:", round(rel_bias_beta_uncensored, 2), "%\n")
cat("alpha relative bias:", round(rel_bias_alpha_uncensored, 2), "%\n")
# Reset plot parameters
par(mfrow = c(1,1))
