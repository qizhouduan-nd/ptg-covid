# Tau bias plots
plot(tau, bias_individual_tau_censored,
main = "Tau Bias (Censored)",
xlab = "True tau", ylab = "Bias",
pch = 1, ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_censored, col = "red", lty = 2)
plot(tau, bias_individual_tau_uncensored,
main = "Tau Bias (Uncensored)",
xlab = "True tau", ylab = "Bias",
pch = 1, col = "red", ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_uncensored, col = "red", lty = 2)
# Beta bias plots
plot(beta, bias_individual_beta_censored,
main = "Beta Bias (Censored)",
xlab = "True beta", ylab = "Bias",
pch = 1, ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_censored, col = "red", lty = 2)
plot(beta, bias_individual_beta_uncensored,
main = "Beta Bias (Uncensored)",
xlab = "True beta", ylab = "Bias",
pch = 1, col = "red", ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_uncensored, col = "red", lty = 2)
# Alpha bias plots
plot(alpha, bias_individual_alpha_censored,
main = "Alpha Bias (Censored)",
xlab = "True alpha", ylab = "Bias",
pch = 1, ylim = c(-0.3, 1))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_censored, col = "red", lty = 2)
plot(alpha, bias_individual_alpha_uncensored,
main = "Alpha Bias (Uncensored)",
xlab = "True alpha", ylab = "Bias",
pch = 1, col = "red", ylim = c(-0.3, 1))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_uncensored, col = "red", lty = 2)
# Calculate relative bias (as percentage)
rel_bias_tau_censored = 100 * mean((estimated_tau_censored - tau)/tau)
rel_bias_beta_censored = 100 * mean((estimated_beta_censored - beta)/beta)
rel_bias_alpha_censored = 100 * mean((estimated_alpha_censored - alpha)/alpha)
rel_bias_tau_uncensored = 100 * mean((estimated_tau_uncensored - tau)/tau)
rel_bias_beta_uncensored = 100 * mean((estimated_beta_uncensored - beta)/beta)
rel_bias_alpha_uncensored = 100 * mean((estimated_alpha_uncensored - alpha)/alpha)
censored_rel_bias = c(rel_bias_tau_censored, rel_bias_beta_censored,
rel_bias_alpha_censored)
uncensored_rel_bias = c(rel_bias_tau_uncensored, rel_bias_beta_uncensored,
rel_bias_alpha_uncensored)
rel_bias_res = data.frame(censored_rel_bias, uncensored_rel_bias)
rownames(rel_bias_res) = c('tau', 'alpha', 'beta')
overall_bias_res
rel_bias_res
library(numDeriv)
set.seed(12345)
# setting up
N = 50
J = 10
tau = round(rnorm(N, 0, 0.25), 3)
beta = round(rnorm(J, 1.8, 0.25), 3)
alpha = round(runif(J, 1.75, 3.25), 3)
# data generation function
generate_data = function(N, J, true_tau, true_beta, true_alpha, c) {
time_matrix = matrix(nrow = N, ncol = J)
for(j in 1:J) {
for(i in 1:N) {
time_matrix[i,j] <- rlnorm(1, meanlog = true_beta[j] - true_tau[i],
sdlog = 1/true_alpha[j])
}
}
censored = time_matrix > c
censored_data = pmin(time_matrix, c)
censor_rate = sum(censored) / (N*J)
return(list(time_matrix = time_matrix,
censored_data = censored_data,
censored = censored,
censor_rate = censor_rate))
}
## change here
c = 10
raw_data = generate_data(N, J, tau, beta, alpha, c)
## log-likelihood censored
log_likelihood_censored = function(params, dat, censored, N, J, time_limit) {
tau = params[1:N]
alpha = params[(N+1):(N+J)]
beta = params[(N+J+1):(N+2*J)]
ll = 0
for(j in 1:J) {
for(i in 1:N) {
if(!censored[i,j]) {
#  uncensored observations
non_exp_part = alpha[j] / (dat[i,j] * sqrt(2 * pi))
exponent = -0.5 * (alpha[j] * (log(dat[i,j]) - beta[j] + tau[i]))^2
ll = ll + log(non_exp_part) + exponent
} else {
#  censored observations - use survival function
z = alpha[j] * (log(time_limit) - beta[j] + tau[i])
ll = ll + pnorm(z, lower.tail = FALSE, log.p = TRUE)
}
}
}
return(-ll)
}
## log-likelihood uncensored
log_likelihood_uncensored = function(params, dat, N, J) {
tau = params[1:N]
alpha = params[(N+1):(N+J)]
beta = params[(N+J+1):(N+2*J)]
ll <- 0
for(j in 1:J) {
for(i in 1:N) {
# For all observations
non_exp_part = alpha[j] / (dat[i,j] * sqrt(2 * pi))
exponent = -0.5 * (alpha[j] * (log(dat[i,j]) - beta[j] + tau[i]))^2
ll = ll + log(non_exp_part) + exponent
}
}
return(-ll)
}
# parameter bounds
lower_bounds = c(rep(-Inf, N),    # tau: unbounded
rep(1.75, J),     # alpha: lower bound
rep(-Inf, J))     # beta: unbounded
upper_bounds = c(rep(Inf, N),     # tau: unbounded
rep(3.25, J),     # alpha: upper bound
rep(Inf, J))      # beta: unbounded
# initialize parameter values
init_params = c(rep(0, N),        # tau starts at 0
rep(2.5, J),       # alpha starts at middle of range
rep(1.8, J))       # beta starts at prior mean
# set stopping rule
max_iter = 1
tolerance = 0.0000001
# censored model
prev_ll = 0
for(iter in 1:max_iter) {
optim_result_censored = optim(init_params,
log_likelihood_censored,
dat = raw_data$censored_data,
censored = raw_data$censored,
N = N,
J = J,
time_limit = c,
method = "L-BFGS-B",
lower = lower_bounds,
upper = upper_bounds)
if(abs(prev_ll - optim_result_censored$value) < tolerance) {
break
}
prev_ll = optim_result_censored$value
init_params = optim_result_censored$par
}
# uncensored model
prev_ll = 0
init_params = c(rep(0, N), rep(2.5, J), rep(1.8, J))
for(iter in 1:max_iter) {
optim_result_uncensored = optim(init_params,
log_likelihood_uncensored,
dat = raw_data$censored_data,
N = N,
J = J,
method = "L-BFGS-B",
lower = lower_bounds,
upper = upper_bounds)
if(abs(prev_ll - optim_result_uncensored$value) < tolerance) {
break
}
prev_ll = optim_result_uncensored$value
init_params = optim_result_uncensored$par
}
# estimated parameters
estimated_tau_censored = optim_result_censored$par[1:N]
estimated_alpha_censored = optim_result_censored$par[(N+1):(N+J)]
estimated_beta_censored = optim_result_censored$par[(N+J+1):(N+2*J)]
estimated_tau_uncensored = optim_result_uncensored$par[1:N]
estimated_alpha_uncensored = optim_result_uncensored$par[(N+1):(N+J)]
estimated_beta_uncensored = optim_result_uncensored$par[(N+J+1):(N+2*J)]
#  results
par(mfrow = c(1,3))
# tau
plot(tau, estimated_tau_censored,
main = paste("tau (censoring rate:", round(raw_data$censor_rate, 3), ")"),
xlab = "True tau", ylab = "Estimated tau",
pch = 1)
points(tau, estimated_tau_uncensored, col = "red", pch = 19)
abline(0, 1, col = "blue")
legend("topleft",
legend = c("Censored Model", "Uncensored Model"),
pch = c(1, 19),
col = c("black", "red"))
# alpha
plot(alpha, estimated_alpha_censored,
main = "alpha",
xlab = "True alpha", ylab = "Estimated alpha",
pch = 1)
points(alpha, estimated_alpha_uncensored, col = "red", pch = 19)
abline(0, 1, col = "blue")
# beta
plot(beta, estimated_beta_censored,
main = "beta",
xlab = "True beta", ylab = "Estimated beta",
pch = 1)
points(beta, estimated_beta_uncensored, col = "red", pch = 19)
abline(0, 1, col = "blue")
### plots
# bias for tau, beta, alpha
# Bias = mean(estimated - true)
# censored model overall bias
bias_tau_censored = mean(estimated_tau_censored - tau)
bias_beta_censored = mean(estimated_beta_censored - beta)
bias_alpha_censored = mean(estimated_alpha_censored - alpha)
# uncensored model overall bias
bias_tau_uncensored = mean(estimated_tau_uncensored - tau)
bias_beta_uncensored = mean(estimated_beta_uncensored - beta)
bias_alpha_uncensored = mean(estimated_alpha_uncensored - alpha)
censored_overall_bias = c(bias_tau_censored, bias_beta_censored, bias_alpha_censored)
uncensroed_overall_bias = c(bias_tau_uncensored, bias_beta_uncensored, bias_alpha_uncensored)
overall_bias_res = data.frame(censored_overall_bias, uncensroed_overall_bias)
rownames(overall_bias_res) = c('tau', 'alpha', 'beta')
# individual biases
bias_individual_tau_censored = estimated_tau_censored - tau
bias_individual_beta_censored = estimated_beta_censored - beta
bias_individual_alpha_censored = estimated_alpha_censored - alpha
bias_individual_tau_uncensored = estimated_tau_uncensored - tau
bias_individual_beta_uncensored = estimated_beta_uncensored - beta
bias_individual_alpha_uncensored = estimated_alpha_uncensored - alpha
# Create bias plots
par(mfrow = c(2,3))
# Tau bias plots
plot(tau, bias_individual_tau_censored,
main = "Tau Bias (Censored)",
xlab = "True tau", ylab = "Bias",
pch = 1, ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_censored, col = "red", lty = 2)
plot(tau, bias_individual_tau_uncensored,
main = "Tau Bias (Uncensored)",
xlab = "True tau", ylab = "Bias",
pch = 1, col = "red", ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_uncensored, col = "red", lty = 2)
# Beta bias plots
plot(beta, bias_individual_beta_censored,
main = "Beta Bias (Censored)",
xlab = "True beta", ylab = "Bias",
pch = 1, ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_censored, col = "red", lty = 2)
plot(beta, bias_individual_beta_uncensored,
main = "Beta Bias (Uncensored)",
xlab = "True beta", ylab = "Bias",
pch = 1, col = "red", ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_uncensored, col = "red", lty = 2)
# Alpha bias plots
plot(alpha, bias_individual_alpha_censored,
main = "Alpha Bias (Censored)",
xlab = "True alpha", ylab = "Bias",
pch = 1, ylim = c(-0.3, 1))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_censored, col = "red", lty = 2)
plot(alpha, bias_individual_alpha_uncensored,
main = "Alpha Bias (Uncensored)",
xlab = "True alpha", ylab = "Bias",
pch = 1, col = "red", ylim = c(-0.3, 1))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_uncensored, col = "red", lty = 2)
# Calculate relative bias (as percentage)
rel_bias_tau_censored = 100 * mean((estimated_tau_censored - tau)/tau)
rel_bias_beta_censored = 100 * mean((estimated_beta_censored - beta)/beta)
rel_bias_alpha_censored = 100 * mean((estimated_alpha_censored - alpha)/alpha)
rel_bias_tau_uncensored = 100 * mean((estimated_tau_uncensored - tau)/tau)
rel_bias_beta_uncensored = 100 * mean((estimated_beta_uncensored - beta)/beta)
rel_bias_alpha_uncensored = 100 * mean((estimated_alpha_uncensored - alpha)/alpha)
censored_rel_bias = c(rel_bias_tau_censored, rel_bias_beta_censored,
rel_bias_alpha_censored)
uncensored_rel_bias = c(rel_bias_tau_uncensored, rel_bias_beta_uncensored,
rel_bias_alpha_uncensored)
rel_bias_res = data.frame(censored_rel_bias, uncensored_rel_bias)
rownames(rel_bias_res) = c('tau', 'alpha', 'beta')
overall_bias_res
rel_bias_res
library(numDeriv)
set.seed(12345)
# setting up
N = 50
J = 10
tau = round(rnorm(N, 0, 0.25), 3)
beta = round(rnorm(J, 1.8, 0.25), 3)
alpha = round(runif(J, 1.75, 3.25), 3)
# data generation function
generate_data = function(N, J, true_tau, true_beta, true_alpha, c) {
time_matrix = matrix(nrow = N, ncol = J)
for(j in 1:J) {
for(i in 1:N) {
time_matrix[i,j] <- rlnorm(1, meanlog = true_beta[j] - true_tau[i],
sdlog = 1/true_alpha[j])
}
}
censored = time_matrix > c
censored_data = pmin(time_matrix, c)
censor_rate = sum(censored) / (N*J)
return(list(time_matrix = time_matrix,
censored_data = censored_data,
censored = censored,
censor_rate = censor_rate))
}
## change here
c = 10
raw_data = generate_data(N, J, tau, beta, alpha, c)
## log-likelihood censored
log_likelihood_censored = function(params, dat, censored, N, J, time_limit) {
tau = params[1:N]
alpha = params[(N+1):(N+J)]
beta = params[(N+J+1):(N+2*J)]
ll = 0
for(j in 1:J) {
for(i in 1:N) {
if(!censored[i,j]) {
#  uncensored observations
non_exp_part = alpha[j] / (dat[i,j] * sqrt(2 * pi))
exponent = -0.5 * (alpha[j] * (log(dat[i,j]) - beta[j] + tau[i]))^2
ll = ll + log(non_exp_part) + exponent
} else {
#  censored observations - use survival function
z = alpha[j] * (log(time_limit) - beta[j] + tau[i])
ll = ll + pnorm(z, lower.tail = FALSE, log.p = TRUE)
}
}
}
return(-ll)
}
## log-likelihood uncensored
log_likelihood_uncensored = function(params, dat, N, J) {
tau = params[1:N]
alpha = params[(N+1):(N+J)]
beta = params[(N+J+1):(N+2*J)]
ll <- 0
for(j in 1:J) {
for(i in 1:N) {
# For all observations
non_exp_part = alpha[j] / (dat[i,j] * sqrt(2 * pi))
exponent = -0.5 * (alpha[j] * (log(dat[i,j]) - beta[j] + tau[i]))^2
ll = ll + log(non_exp_part) + exponent
}
}
return(-ll)
}
# parameter bounds
lower_bounds = c(rep(-Inf, N),    # tau: unbounded
rep(1.75, J),     # alpha: lower bound
rep(-Inf, J))     # beta: unbounded
upper_bounds = c(rep(Inf, N),     # tau: unbounded
rep(3.25, J),     # alpha: upper bound
rep(Inf, J))      # beta: unbounded
# initialize parameter values
init_params = c(rep(0, N),        # tau starts at 0
rep(2.5, J),       # alpha starts at middle of range
rep(1.8, J))       # beta starts at prior mean
# set stopping rule
max_iter = 1
tolerance = 0.0000001
# censored model
prev_ll = 0
for(iter in 1:max_iter) {
optim_result_censored = optim(init_params,
log_likelihood_censored,
dat = raw_data$censored_data,
censored = raw_data$censored,
N = N,
J = J,
time_limit = c,
method = "L-BFGS-B",
lower = lower_bounds,
upper = upper_bounds)
if(abs(prev_ll - optim_result_censored$value) < tolerance) {
break
}
prev_ll = optim_result_censored$value
init_params = optim_result_censored$par
}
# uncensored model
prev_ll = 0
init_params = c(rep(0, N), rep(2.5, J), rep(1.8, J))
for(iter in 1:max_iter) {
optim_result_uncensored = optim(init_params,
log_likelihood_uncensored,
dat = raw_data$censored_data,
N = N,
J = J,
method = "L-BFGS-B",
lower = lower_bounds,
upper = upper_bounds)
if(abs(prev_ll - optim_result_uncensored$value) < tolerance) {
break
}
prev_ll = optim_result_uncensored$value
init_params = optim_result_uncensored$par
}
# estimated parameters
estimated_tau_censored = optim_result_censored$par[1:N]
estimated_alpha_censored = optim_result_censored$par[(N+1):(N+J)]
estimated_beta_censored = optim_result_censored$par[(N+J+1):(N+2*J)]
estimated_tau_uncensored = optim_result_uncensored$par[1:N]
estimated_alpha_uncensored = optim_result_uncensored$par[(N+1):(N+J)]
estimated_beta_uncensored = optim_result_uncensored$par[(N+J+1):(N+2*J)]
#  results
par(mfrow = c(1,3))
# tau
plot(tau, estimated_tau_censored,
main = paste("tau (censoring rate:", round(raw_data$censor_rate, 3), ")"),
xlab = "True tau", ylab = "Estimated tau",
pch = 1)
points(tau, estimated_tau_uncensored, col = "red", pch = 19)
abline(0, 1, col = "blue")
legend("topleft",
legend = c("Censored Model", "Uncensored Model"),
pch = c(1, 19),
col = c("black", "red"))
# alpha
plot(alpha, estimated_alpha_censored,
main = "alpha",
xlab = "True alpha", ylab = "Estimated alpha",
pch = 1)
points(alpha, estimated_alpha_uncensored, col = "red", pch = 19)
abline(0, 1, col = "blue")
# beta
plot(beta, estimated_beta_censored,
main = "beta",
xlab = "True beta", ylab = "Estimated beta",
pch = 1)
points(beta, estimated_beta_uncensored, col = "red", pch = 19)
abline(0, 1, col = "blue")
### plots
# bias for tau, beta, alpha
# Bias = mean(estimated - true)
# censored model overall bias
bias_tau_censored = mean(estimated_tau_censored - tau)
bias_beta_censored = mean(estimated_beta_censored - beta)
bias_alpha_censored = mean(estimated_alpha_censored - alpha)
# uncensored model overall bias
bias_tau_uncensored = mean(estimated_tau_uncensored - tau)
bias_beta_uncensored = mean(estimated_beta_uncensored - beta)
bias_alpha_uncensored = mean(estimated_alpha_uncensored - alpha)
censored_overall_bias = c(bias_tau_censored, bias_beta_censored, bias_alpha_censored)
uncensroed_overall_bias = c(bias_tau_uncensored, bias_beta_uncensored, bias_alpha_uncensored)
overall_bias_res = data.frame(censored_overall_bias, uncensroed_overall_bias)
rownames(overall_bias_res) = c('tau', 'alpha', 'beta')
# individual biases
bias_individual_tau_censored = estimated_tau_censored - tau
bias_individual_beta_censored = estimated_beta_censored - beta
bias_individual_alpha_censored = estimated_alpha_censored - alpha
bias_individual_tau_uncensored = estimated_tau_uncensored - tau
bias_individual_beta_uncensored = estimated_beta_uncensored - beta
bias_individual_alpha_uncensored = estimated_alpha_uncensored - alpha
# Create bias plots
par(mfrow = c(2,3))
# Tau bias plots
plot(tau, bias_individual_tau_censored,
main = "Tau Bias (Censored)",
xlab = "True tau", ylab = "Bias",
pch = 1, ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_censored, col = "red", lty = 2)
plot(tau, bias_individual_tau_uncensored,
main = "Tau Bias (Uncensored)",
xlab = "True tau", ylab = "Bias",
pch = 1, col = "red", ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_tau_uncensored, col = "red", lty = 2)
# Beta bias plots
plot(beta, bias_individual_beta_censored,
main = "Beta Bias (Censored)",
xlab = "True beta", ylab = "Bias",
pch = 1, ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_censored, col = "red", lty = 2)
plot(beta, bias_individual_beta_uncensored,
main = "Beta Bias (Uncensored)",
xlab = "True beta", ylab = "Bias",
pch = 1, col = "red", ylim = c(-0.3, 0.3))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_beta_uncensored, col = "red", lty = 2)
# Alpha bias plots
plot(alpha, bias_individual_alpha_censored,
main = "Alpha Bias (Censored)",
xlab = "True alpha", ylab = "Bias",
pch = 1, ylim = c(-0.3, 1))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_censored, col = "red", lty = 2)
plot(alpha, bias_individual_alpha_uncensored,
main = "Alpha Bias (Uncensored)",
xlab = "True alpha", ylab = "Bias",
pch = 1, col = "red", ylim = c(-0.3, 1))
abline(h = 0, col = "blue", lty = 2)
abline(h = bias_alpha_uncensored, col = "red", lty = 2)
# Calculate relative bias (as percentage)
rel_bias_tau_censored = 100 * mean((estimated_tau_censored - tau)/tau)
rel_bias_beta_censored = 100 * mean((estimated_beta_censored - beta)/beta)
rel_bias_alpha_censored = 100 * mean((estimated_alpha_censored - alpha)/alpha)
rel_bias_tau_uncensored = 100 * mean((estimated_tau_uncensored - tau)/tau)
rel_bias_beta_uncensored = 100 * mean((estimated_beta_uncensored - beta)/beta)
rel_bias_alpha_uncensored = 100 * mean((estimated_alpha_uncensored - alpha)/alpha)
censored_rel_bias = c(rel_bias_tau_censored, rel_bias_beta_censored,
rel_bias_alpha_censored)
uncensored_rel_bias = c(rel_bias_tau_uncensored, rel_bias_beta_uncensored,
rel_bias_alpha_uncensored)
rel_bias_res = data.frame(censored_rel_bias, uncensored_rel_bias)
rownames(rel_bias_res) = c('tau', 'alpha', 'beta')
overall_bias_res
rel_bias_res
