sampler = c()
while(counter < 10000){
u = runif(n = 1, min = 0, max = 1)
y = rnorm(n = 1, mean = 0, sd = 1)
fy = y * (1 - pnorm(cut_point, 0, 1))^(y > cut_point)
left_side = fy / (M * y)
if(u < left_side){
sampler = c(sampler, y)
}
counter = counter + 1
}
hist(sampler, breaks = 30)
mean(sampler)
sd(sampler)
### now let's do rejection sampling
cut_point = 0.8
M = 2
counter = 1
sampler = c()
while(counter < 10000){
u = runif(n = 1, min = 0, max = 1)
y = rnorm(n = 1, mean = 0, sd = 1)
fy = y * (1 - pnorm(cut_point, 0, 1))^(y > cut_point)
left_side = fy / (M * y)
if(u < left_side){
sampler = c(sampler, y)
}
counter = counter + 1
}
hist(sampler, breaks = 30)
mean(sampler)
sd(sampler)
### now let's do rejection sampling
cut_point = 0.8
M = 2
counter = 1
sampler = c()
while(counter < 10000){
u = runif(n = 1, min = 0, max = 1)
y = rnorm(n = 1, mean = 0, sd = 1)
fy = y * (1 - pnorm(cut_point, 0, 1))^(y > cut_point)
left_side = fy / (M * y)
if(u < left_side){
sampler = c(sampler, y)
}
counter = counter + 1
}
hist(sampler, breaks = 30)
mean(sampler)
sd(sampler)
### now let's do rejection sampling
cut_point = 0.8
M = 2
counter = 1
sampler = c()
while(counter < 10000){
u = runif(n = 1, min = 0, max = 1)
y = rnorm(n = 1, mean = 0, sd = 1)
fy = y * (1 - pnorm(cut_point, 0, 1))^(y > cut_point)
left_side = fy / (M * y)
if(u < left_side){
sampler = c(sampler, y)
}
counter = counter + 1
}
hist(sampler, breaks = 30)
mean(sampler)
sd(sampler)
### now let's do rejection sampling
cut_point = 0.8
M = 2
counter = 1
sampler = c()
while(counter < 10000){
u = runif(n = 1, min = 0, max = 1)
y = rnorm(n = 1, mean = 0, sd = 1)
fy = y * (1 - pnorm(cut_point, 0, 1))^(y > cut_point)
left_side = fy / (M * y)
if(u < left_side){
sampler = c(sampler, y)
}
counter = counter + 1
}
hist(sampler, breaks = 30)
mean(sampler)
sd(sampler)
### now let's do rejection sampling
cut_point = 0.8
M = 2
counter = 1
sampler = c()
while(counter < 10000){
u = runif(n = 1, min = 0, max = 1)
y = rnorm(n = 1, mean = 0, sd = 1)
fy = y * (1 - pnorm(cut_point, 0, 1))^(y > cut_point)
left_side = fy / (M * y)
if(u < left_side){
sampler = c(sampler, y)
}
counter = counter + 1
}
hist(sampler, breaks = 30)
mean(sampler)
sd(sampler)
data_generation = function(N, J, tau, beta, alpha){
# time matrix without DIF
time_matrix = matrix(NA, nrow = N, ncol = J)
for(i in 1:N){
for(j in 1:J){
log.t = rnorm(1, beta[j] - tau[i], sd = 1/alpha[j])
if(log.t < 0){
while(log.t < 0){
log.t = rnorm(1, beta[j] - tau[i], sd = 1/alpha[j])
}
}
time_matrix[i, j] = log.t
}
}
return(time_matrix)
}
# Example usage
N = 1000
J = 20
tau_i = round(rnorm(N, 0, 0.3), 3)
beta_j = round(rnorm(J, 4, 0.45), 3)
alpha_j = round(rnorm(J, 1.85, 0.15), 3)
t_ij = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
### so that's the target distribution / this is an experiment with normal cdf and pdf
## thus it should work with the log normal distribution.
cut_point = 0.8
pdf_dist = rnorm(1000, 0, 1)
indicator = pdf_dist > cut_point
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
mean(target_function)
sd(target_function)
(1 - pnorm(cut_point, 0, 1))^indicator
table((1 - pnorm(cut_point, 0, 1))^indicator)
indicator
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
mean(target_function)
indicator
(1 - pnorm(cut_point, 0, 1))^indicator
mean(target_function)
sd(target_function)
t_ij
## now apply the parameters from the log-normal model
## first item
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
hist(pdf_dist)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
## now apply the parameters from the log-normal model
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist, breaks = 30, col = 'red')
hist(target_function, breaks = 30, col = 'blue', add = TRUE)
mean(target_function)
sd(target_function)
describe(target_function)
describe(pdf_dist)
pdf_dist
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
## first item
cut_point = 5
pdf_dist = data_generation(N = N,J = J, tau = tau_i,
alpha = alpha_j, beta = beta_j)
indicator = ifelse(pdf_dist > cut_point, 1, 0)
target_function = pdf_dist * (1 - pnorm(cut_point, 0, 1))^indicator
hist(pdf_dist[,1], breaks = 30, col = 'red')
hist(target_function[,1], breaks = 30, col = 'blue', add = TRUE)
describe(pdf_dist)
describe(target_function)
length(MSE_5_one)
MSE_5_one = c(0.02 ,0.00,0.01, 0.01, 0.01,0.01, 0.01, 0.01, 0.01 ,0.01)
length(MSE_5_one)
## load data
shortlist = read_excel('effect_sizes_and_moderators.xlsx')
## look at how many studies uses PTGI
shortlist %>% group_by(`scale type`) %>% count() # 20 PTGI and 10 PTGI-SF
## we can do normalization or we can perform separate analysis for these two types of studies
## check the sample size
sum(shortlist$`sample size`) ## overall
PTGI_dat = shortlist %>% filter(`scale type` == 'PTGI')
PTGISF_dat = shortlist %>% filter(`scale type` != 'PTGI')
################################################################
################################################################
#### stretch PTGI-SF
PTGISF_transformed = PTGISF_dat %>% mutate(`effect size` = `effect size` / 10 * 21) %>%
mutate(sd = sqrt(sd^2 * 2.1^2))
PTGISF_transformed
PTGI = rbind(PTGI_dat, PTGISF_transformed)
head(PTGI)
### start analysis with all the studies (PTGI gets successfully transformed)
PTGI_num = sum((PTGI_dat$`sample size` - 1) * PTGI_dat$sd^2)
PTGI_denom = sum(PTGI_dat$`sample size`) - length(PTGI_dat$`sample size`)
PTGI_sp = PTGI_num / PTGI_denom
PTGI_pooled_sd = sqrt(PTGI_sp)
PTGI_pooled_sd
cutoff = 45
PTGI_g = PTGI %>%
mutate(PTGI_num = (sum(`sample size`) - 1) * sd^2) %>%
mutate(PTGI_denom = sum(`sample size`) - length(`sample size`)) %>%
mutate(PTGI_pooled_sd = sqrt(PTGI_num / PTGI_denom)) %>%
mutate(g = (`effect size` - cutoff) / PTGI_pooled_sd) %>%
mutate(v_g = 2 * (1 - 0) / (`sample size`) + g^2 / (2 * (`sample size` - 1)))
## now we have the ingredient to perform meta analysis
PTGI_g[,c('g', 'v_g')]
## we run intercept only model for main analysis (this would be random intercept model)
main_analysis_model_PTGI = rma(g ~ 1, vi = v_g, data = PTGI_g)
main_analysis_model_PTGI
## check a few descriptives
describe(PTGI_g)
describe(PTGI_g$g)
################################################################
## Subgroup analysis
################################################################
PTGI_PTSD = rma(g ~ PTSD, vi = v_g, data = PTGI_g)
PTGI_PTSD
head(PTGI_g)
##
ptsd_sample = PTGI_g %>% filter(`PTSD` == 1) %>% select(`Source`, `sample size`)
sum(ptsd_sample$`sample size`)
## forest plot
forest(main_analysis_model_PTGI,
header="Author(s) and Year", mlab="", shade=TRUE,
cex=0.75)
ptsd_sample
##
ptsd_sample = PTGI_g %>% filter(`PTSD` == 1) %>% select(`Source`, `sample size`)
##
ptsd_sample = PTGI_g %>% filter(`PTSD` == 1)
ptsd_sample
##
ptsd_sample = PTGI_g %>% filter(`PTSD` == 1) %>% select(Source, `sample size`)
##
ptsd_sample = PTGI_g %>% filter(`PTSD` == 1) %>% dplyr::select(Source, `sample size`)
sum(ptsd_sample)
##
ptsd_sample = PTGI_g %>% filter(`PTSD` == 1) %>% dplyr::select(Source, `sample size`)
ptsd_sample
## forest plot
forest(main_analysis_model_PTGI,
header="Author(s) and Year", mlab="", shade=TRUE,
cex=0.75)
## create tables for subgroup analysis (table 3 in the manuscript)
# Source	Year	Sample size	Male,%	Age (mean)	End Point	Follow up, y	Determinant
PTGI_subgroup = PTGI %>% dplyr::select("Source", "Publication Year", "sample size",
"Male%", "Mean Age","PTSD", "Anxiety",
"Depression", "Social Support",
"Coping","Sprituality/Religion")
## create tables for subgroup analysis (table 3 in the manuscript)
# Source	Year	Sample size	Male,%	Age (mean)	End Point	Follow up, y	Determinant
PTGI_subgroup = PTGI %>% dplyr::select("Source", "sample size",
"Male%", "Mean Age","PTSD", "Anxiety",
"Depression", "Social Support",
"Coping","Sprituality/Religion")
## create tables for subgroup analysis (table 3 in the manuscript)
# Source	Year	Sample size	Male,%	Age (mean)	End Point	Follow up, y	Determinant
PTGI_subgroup = PTGI %>% dplyr::select("Source", "sample size", "Mean Age","PTSD", "Anxiety",
"Depression", "Social Support",
"Coping","Sprituality/Religion")
## create tables for subgroup analysis (table 3 in the manuscript)
# Source	Year	Sample size	Male,%	Age (mean)	End Point	Follow up, y	Determinant
PTGI_subgroup = PTGI %>% dplyr::select("Source", "sample size","PTSD", "Anxiety",
"Depression", "Social Support",
"Coping","Sprituality/Religion")
## this is table 3
PTGI_subgroup  %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
### more subgroup analysis
PTGI_Anxiety = rma(g ~ Anxiety, vi = v_g, data = PTGI_g)
PTGI_Anxiety
PTGI_Depression = rma(g ~ Depression, vi = v_g, data = PTGI_g)
PTGI_Depression
PTGI_Support = rma(g ~ `Social Support`, vi = v_g, data = PTGI_g)
PTGI_Support
PTGI_Coping = rma(g ~ `Coping`, vi = v_g, data = PTGI_g)
PTGI_Coping
PTGI_religion = rma(g ~ `Sprituality/Religion`, vi = v_g, data = PTGI_g)
PTGI_religion
## forest plot
ptsd_sample = PTGI_g %>% filter(`PTSD` == 1) %>% dplyr::select(Source, `sample size`)
forest(main_analysis_model_PTGI,
header="Author(s) and Year", mlab="", shade=TRUE,
cex=0.75)
## this is table 3
PTGI_subgroup  %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
## create tables for main analysis (table 1 in the manuscript)
PTGI_main_analysis_table = PTGI %>% select(Source, `Publication Year`,
`sample size`, `Male%`, `Mean Age`,
`effect size`, sd) %>%
mutate(`effect size` = round(`effect size`,2)) %>%
mutate(sd = round(sd,2))
## create tables for main analysis (table 1 in the manuscript)
PTGI_main_analysis_table = PTGI %>% select(Source, `sample size`,
`effect size`, sd) %>%
mutate(`effect size` = round(`effect size`,2)) %>%
mutate(sd = round(sd,2))
PTGI
## create tables for main analysis (table 1 in the manuscript)
PTGI_main_analysis_table = PTGI_g %>% select(Source, `sample size`,
`effect size`, sd) %>%
mutate(`effect size` = round(`effect size`,2)) %>%
mutate(sd = round(sd,2))
## create tables for main analysis (table 1 in the manuscript)
PTGI_main_analysis_table = PTGI_g %>% dplyr::select(Source, `sample size`,
`effect size`, sd) %>%
mutate(`effect size` = round(`effect size`,2)) %>%
mutate(sd = round(sd,2))
## this is table 1
PTGI_main_analysis_table %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
## create tables for subgroup analysis (table 3 in the manuscript)
# Source	Year	Sample size	Male,%	Age (mean)	End Point	Follow up, y	Determinant
PTGI_subgroup = PTGI %>% dplyr::select("Source", "sample size","PTSD", "Anxiety",
"Depression", "Social Support",
"Coping","Sprituality/Religion")
## this is table 3
PTGI_subgroup  %>%
kbl() %>%
kable_classic(full_width = F, html_font = "Cambria")
PTGI_Anxiety
PTGI_Coping
PTGI_PTSD
PTGI_Depression
644.52 - 588
56.52 + 639.26 + 46 + 353.31
56.52 + 639.26 + 46 + 353.31 + 4658.78 - 270
